#  This file is part of the myhdl library, a Python package for using
#  Python as a Hardware Description Language.
#
#  Copyright (C) 2003 Jan Decaluwe
#
#  The myhdl library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public License as
#  published by the Free Software Foundation; either version 2.1 of the
#  License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.

#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

__author__ = "Jan Decaluwe <jan@jandecaluwe.com>"
__version__ = "$Revision$"
__date__ = "$Date$"

Specification for the Simulation class
--------------------------------------

* The Simulation object constructor has an arbitrary number of
  arguments with each argument being a generator, or a nested sequence
  of generators. A nested sequence means a sequence whose elements may
  themselves be sequences, and so on, down to an arbitrary level.

* A Simulation object has a 'run(duration=None)' method. If a duration
  is specified, it should be a positive integer that indicates that
  the simulation should run for that amount of time. If not, it should
  run until there are no further events. Consecutive runs for a number
  of durations t1, t2, ... tn should give exactly the same behavior as
  a single run for duration t1+t2+...+ tn. The 'run' method returns
  None if there are no further events, and 1 otherwise. When the
  simulation has run for the specified duration, the StopSimulation
  exception is raised.

* When there are no further events during as simulation run, the
  StopSimulation exception is raised.

* When the StopSimulation exception is caught, the run method prints
  the exception message and returns 1.




